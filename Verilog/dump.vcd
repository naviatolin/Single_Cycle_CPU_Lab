$date
	Sat Dec 21 18:51:11 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module cpu_test $end
$var reg 1 ! clk $end
$var reg 1024 " dump_fn [1023:0] $end
$var reg 1 # init_data $end
$var reg 1 $ reset $end
$scope module cpu $end
$var wire 1 ! clk $end
$var wire 1 $ reset $end
$var wire 1 % wr_en_reg $end
$var wire 32 & signextimm [31:0] $end
$var wire 5 ' shamt [4:0] $end
$var wire 5 ( rt [4:0] $end
$var wire 5 ) rs [4:0] $end
$var wire 5 * rd [4:0] $end
$var wire 6 + opcode [5:0] $end
$var wire 32 , jump_addr [31:0] $end
$var wire 32 - instruction [31:0] $end
$var wire 16 . immediate [15:0] $end
$var wire 6 / funct [5:0] $end
$var wire 32 0 data_out [31:0] $end
$var wire 32 1 branch_addr [31:0] $end
$var wire 26 2 address [25:0] $end
$var wire 1 3 XORI_Signal $end
$var wire 1 4 SW_Signal $end
$var wire 1 5 SUB_Signal $end
$var wire 1 6 SLT_Signal $end
$var wire 32 7 ReadData2 [31:0] $end
$var wire 32 8 ReadData1 [31:0] $end
$var wire 32 9 PC [31:0] $end
$var wire 1 : LW_Signal $end
$var wire 1 ; J_Signal $end
$var wire 1 < JR_Signal $end
$var wire 1 = JAL_Signal $end
$var wire 1 > BNE_Signal $end
$var wire 1 ? BEQ_Signal $end
$var wire 32 @ ALU_result [31:0] $end
$var wire 3 A ALU_Signal [2:0] $end
$var wire 1 B ADD_Signal $end
$var wire 1 C ADDI_Signal $end
$var reg 32 D PC_Last [31:0] $end
$var reg 5 E ReadRegister2 [4:0] $end
$var reg 32 F WriteData [31:0] $end
$var reg 5 G WriteRegister [4:0] $end
$var reg 32 H alternative_PC [31:0] $end
$var reg 32 I data_addr [31:0] $end
$var reg 32 J data_in [31:0] $end
$var reg 32 K second_operand [31:0] $end
$var reg 1 L use_alternative_PC $end
$var reg 1 M wr_en_mem $end
$scope module ALU $end
$var wire 32 N operandB [31:0] $end
$var wire 32 O operandA [31:0] $end
$var wire 3 P command [2:0] $end
$var reg 32 Q result [31:0] $end
$upscope $end
$scope module BRANCHADDRESS $end
$var wire 16 R immediate [15:0] $end
$var reg 32 S branch_addr [31:0] $end
$var reg 32 T extension [31:0] $end
$upscope $end
$scope module FSM $end
$var wire 6 U opcode [5:0] $end
$var wire 6 V funct [5:0] $end
$var reg 1 C ADDI_Signal $end
$var reg 1 B ADD_Signal $end
$var reg 3 W ALU_Signal [2:0] $end
$var reg 1 ? BEQ_Signal $end
$var reg 1 > BNE_Signal $end
$var reg 1 = JAL_Signal $end
$var reg 1 < JR_Signal $end
$var reg 1 ; J_Signal $end
$var reg 1 : LW_Signal $end
$var reg 1 6 SLT_Signal $end
$var reg 1 5 SUB_Signal $end
$var reg 1 4 SW_Signal $end
$var reg 1 3 XORI_Signal $end
$var reg 1 % wrenable $end
$upscope $end
$scope module INSTRUCTIONDECODER $end
$var wire 32 X instruction [31:0] $end
$var reg 26 Y address [25:0] $end
$var reg 6 Z funct [5:0] $end
$var reg 16 [ immediate [15:0] $end
$var reg 6 \ opcode [5:0] $end
$var reg 5 ] rd [4:0] $end
$var reg 5 ^ rs [4:0] $end
$var reg 5 _ rt [4:0] $end
$var reg 5 ` shamt [4:0] $end
$upscope $end
$scope module JUMPADDRESS $end
$var wire 26 a address [25:0] $end
$var wire 32 b PC [31:0] $end
$var reg 32 c jump_addr [31:0] $end
$var reg 32 d modified_PC [31:0] $end
$upscope $end
$scope module MEMORY $end
$var wire 1 ! clk $end
$var wire 32 e data_addr [31:0] $end
$var wire 32 f data_in [31:0] $end
$var wire 32 g data_out [31:0] $end
$var wire 32 h instruction [31:0] $end
$var wire 1 M wr_en $end
$var wire 32 i PC [31:0] $end
$upscope $end
$scope module SIGNEXTEND $end
$var wire 16 j immediate [15:0] $end
$var reg 32 k signext [31:0] $end
$var reg 32 l signextimm [31:0] $end
$upscope $end
$scope module pc $end
$var wire 32 m PC_last [31:0] $end
$var wire 32 n alternative_PC [31:0] $end
$var wire 1 ! clk $end
$var wire 1 $ reset $end
$var wire 1 L use_alternative_PC $end
$var wire 32 o PC [31:0] $end
$var reg 32 p PC_next [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 ! Clk $end
$var wire 5 q ReadRegister1 [4:0] $end
$var wire 5 r ReadRegister2 [4:0] $end
$var wire 1 % RegWrite $end
$var wire 32 s WriteData [31:0] $end
$var wire 5 t WriteRegister [4:0] $end
$var wire 32 u select_register [31:0] $end
$var wire 32 v reg9 [31:0] $end
$var wire 32 w reg8 [31:0] $end
$var wire 32 x reg7 [31:0] $end
$var wire 32 y reg6 [31:0] $end
$var wire 32 z reg5 [31:0] $end
$var wire 32 { reg4 [31:0] $end
$var wire 32 | reg31 [31:0] $end
$var wire 32 } reg30 [31:0] $end
$var wire 32 ~ reg3 [31:0] $end
$var wire 32 !" reg29 [31:0] $end
$var wire 32 "" reg28 [31:0] $end
$var wire 32 #" reg27 [31:0] $end
$var wire 32 $" reg26 [31:0] $end
$var wire 32 %" reg25 [31:0] $end
$var wire 32 &" reg24 [31:0] $end
$var wire 32 '" reg23 [31:0] $end
$var wire 32 (" reg22 [31:0] $end
$var wire 32 )" reg21 [31:0] $end
$var wire 32 *" reg20 [31:0] $end
$var wire 32 +" reg2 [31:0] $end
$var wire 32 ," reg19 [31:0] $end
$var wire 32 -" reg18 [31:0] $end
$var wire 32 ." reg17 [31:0] $end
$var wire 32 /" reg16 [31:0] $end
$var wire 32 0" reg15 [31:0] $end
$var wire 32 1" reg14 [31:0] $end
$var wire 32 2" reg13 [31:0] $end
$var wire 32 3" reg12 [31:0] $end
$var wire 32 4" reg11 [31:0] $end
$var wire 32 5" reg10 [31:0] $end
$var wire 32 6" reg1 [31:0] $end
$var wire 32 7" reg0 [31:0] $end
$var wire 32 8" ReadData2 [31:0] $end
$var wire 32 9" ReadData1 [31:0] $end
$scope module decoder_0 $end
$var wire 5 :" address [4:0] $end
$var wire 1 % enable $end
$var wire 32 ;" out [31:0] $end
$upscope $end
$scope module reading_reg1 $end
$var wire 5 <" address [4:0] $end
$var wire 32 =" out [31:0] $end
$var wire 32 >" input9 [31:0] $end
$var wire 32 ?" input8 [31:0] $end
$var wire 32 @" input7 [31:0] $end
$var wire 32 A" input6 [31:0] $end
$var wire 32 B" input5 [31:0] $end
$var wire 32 C" input4 [31:0] $end
$var wire 32 D" input31 [31:0] $end
$var wire 32 E" input30 [31:0] $end
$var wire 32 F" input3 [31:0] $end
$var wire 32 G" input29 [31:0] $end
$var wire 32 H" input28 [31:0] $end
$var wire 32 I" input27 [31:0] $end
$var wire 32 J" input26 [31:0] $end
$var wire 32 K" input25 [31:0] $end
$var wire 32 L" input24 [31:0] $end
$var wire 32 M" input23 [31:0] $end
$var wire 32 N" input22 [31:0] $end
$var wire 32 O" input21 [31:0] $end
$var wire 32 P" input20 [31:0] $end
$var wire 32 Q" input2 [31:0] $end
$var wire 32 R" input19 [31:0] $end
$var wire 32 S" input18 [31:0] $end
$var wire 32 T" input17 [31:0] $end
$var wire 32 U" input16 [31:0] $end
$var wire 32 V" input15 [31:0] $end
$var wire 32 W" input14 [31:0] $end
$var wire 32 X" input13 [31:0] $end
$var wire 32 Y" input12 [31:0] $end
$var wire 32 Z" input11 [31:0] $end
$var wire 32 [" input10 [31:0] $end
$var wire 32 \" input1 [31:0] $end
$var wire 32 ]" input0 [31:0] $end
$upscope $end
$scope module reading_reg2 $end
$var wire 5 ^" address [4:0] $end
$var wire 32 _" out [31:0] $end
$var wire 32 `" input9 [31:0] $end
$var wire 32 a" input8 [31:0] $end
$var wire 32 b" input7 [31:0] $end
$var wire 32 c" input6 [31:0] $end
$var wire 32 d" input5 [31:0] $end
$var wire 32 e" input4 [31:0] $end
$var wire 32 f" input31 [31:0] $end
$var wire 32 g" input30 [31:0] $end
$var wire 32 h" input3 [31:0] $end
$var wire 32 i" input29 [31:0] $end
$var wire 32 j" input28 [31:0] $end
$var wire 32 k" input27 [31:0] $end
$var wire 32 l" input26 [31:0] $end
$var wire 32 m" input25 [31:0] $end
$var wire 32 n" input24 [31:0] $end
$var wire 32 o" input23 [31:0] $end
$var wire 32 p" input22 [31:0] $end
$var wire 32 q" input21 [31:0] $end
$var wire 32 r" input20 [31:0] $end
$var wire 32 s" input2 [31:0] $end
$var wire 32 t" input19 [31:0] $end
$var wire 32 u" input18 [31:0] $end
$var wire 32 v" input17 [31:0] $end
$var wire 32 w" input16 [31:0] $end
$var wire 32 x" input15 [31:0] $end
$var wire 32 y" input14 [31:0] $end
$var wire 32 z" input13 [31:0] $end
$var wire 32 {" input12 [31:0] $end
$var wire 32 |" input11 [31:0] $end
$var wire 32 }" input10 [31:0] $end
$var wire 32 ~" input1 [31:0] $end
$var wire 32 !# input0 [31:0] $end
$upscope $end
$scope module writing_information0 $end
$var wire 1 ! clk $end
$var wire 32 "# d [31:0] $end
$var wire 1 ## wrenable $end
$var reg 32 $# q [31:0] $end
$upscope $end
$scope module writing_information1 $end
$var wire 1 ! clk $end
$var wire 32 %# d [31:0] $end
$var wire 1 &# wrenable $end
$var reg 32 '# q [31:0] $end
$upscope $end
$scope module writing_information10 $end
$var wire 1 ! clk $end
$var wire 32 (# d [31:0] $end
$var wire 1 )# wrenable $end
$var reg 32 *# q [31:0] $end
$upscope $end
$scope module writing_information11 $end
$var wire 1 ! clk $end
$var wire 32 +# d [31:0] $end
$var wire 1 ,# wrenable $end
$var reg 32 -# q [31:0] $end
$upscope $end
$scope module writing_information12 $end
$var wire 1 ! clk $end
$var wire 32 .# d [31:0] $end
$var wire 1 /# wrenable $end
$var reg 32 0# q [31:0] $end
$upscope $end
$scope module writing_information13 $end
$var wire 1 ! clk $end
$var wire 32 1# d [31:0] $end
$var wire 1 2# wrenable $end
$var reg 32 3# q [31:0] $end
$upscope $end
$scope module writing_information14 $end
$var wire 1 ! clk $end
$var wire 32 4# d [31:0] $end
$var wire 1 5# wrenable $end
$var reg 32 6# q [31:0] $end
$upscope $end
$scope module writing_information15 $end
$var wire 1 ! clk $end
$var wire 32 7# d [31:0] $end
$var wire 1 8# wrenable $end
$var reg 32 9# q [31:0] $end
$upscope $end
$scope module writing_information16 $end
$var wire 1 ! clk $end
$var wire 32 :# d [31:0] $end
$var wire 1 ;# wrenable $end
$var reg 32 <# q [31:0] $end
$upscope $end
$scope module writing_information17 $end
$var wire 1 ! clk $end
$var wire 32 =# d [31:0] $end
$var wire 1 ># wrenable $end
$var reg 32 ?# q [31:0] $end
$upscope $end
$scope module writing_information18 $end
$var wire 1 ! clk $end
$var wire 32 @# d [31:0] $end
$var wire 1 A# wrenable $end
$var reg 32 B# q [31:0] $end
$upscope $end
$scope module writing_information19 $end
$var wire 1 ! clk $end
$var wire 32 C# d [31:0] $end
$var wire 1 D# wrenable $end
$var reg 32 E# q [31:0] $end
$upscope $end
$scope module writing_information2 $end
$var wire 1 ! clk $end
$var wire 32 F# d [31:0] $end
$var wire 1 G# wrenable $end
$var reg 32 H# q [31:0] $end
$upscope $end
$scope module writing_information20 $end
$var wire 1 ! clk $end
$var wire 32 I# d [31:0] $end
$var wire 1 J# wrenable $end
$var reg 32 K# q [31:0] $end
$upscope $end
$scope module writing_information21 $end
$var wire 1 ! clk $end
$var wire 32 L# d [31:0] $end
$var wire 1 M# wrenable $end
$var reg 32 N# q [31:0] $end
$upscope $end
$scope module writing_information22 $end
$var wire 1 ! clk $end
$var wire 32 O# d [31:0] $end
$var wire 1 P# wrenable $end
$var reg 32 Q# q [31:0] $end
$upscope $end
$scope module writing_information23 $end
$var wire 1 ! clk $end
$var wire 32 R# d [31:0] $end
$var wire 1 S# wrenable $end
$var reg 32 T# q [31:0] $end
$upscope $end
$scope module writing_information24 $end
$var wire 1 ! clk $end
$var wire 32 U# d [31:0] $end
$var wire 1 V# wrenable $end
$var reg 32 W# q [31:0] $end
$upscope $end
$scope module writing_information25 $end
$var wire 1 ! clk $end
$var wire 32 X# d [31:0] $end
$var wire 1 Y# wrenable $end
$var reg 32 Z# q [31:0] $end
$upscope $end
$scope module writing_information26 $end
$var wire 1 ! clk $end
$var wire 32 [# d [31:0] $end
$var wire 1 \# wrenable $end
$var reg 32 ]# q [31:0] $end
$upscope $end
$scope module writing_information27 $end
$var wire 1 ! clk $end
$var wire 32 ^# d [31:0] $end
$var wire 1 _# wrenable $end
$var reg 32 `# q [31:0] $end
$upscope $end
$scope module writing_information28 $end
$var wire 1 ! clk $end
$var wire 32 a# d [31:0] $end
$var wire 1 b# wrenable $end
$var reg 32 c# q [31:0] $end
$upscope $end
$scope module writing_information29 $end
$var wire 1 ! clk $end
$var wire 32 d# d [31:0] $end
$var wire 1 e# wrenable $end
$var reg 32 f# q [31:0] $end
$upscope $end
$scope module writing_information3 $end
$var wire 1 ! clk $end
$var wire 32 g# d [31:0] $end
$var wire 1 h# wrenable $end
$var reg 32 i# q [31:0] $end
$upscope $end
$scope module writing_information30 $end
$var wire 1 ! clk $end
$var wire 32 j# d [31:0] $end
$var wire 1 k# wrenable $end
$var reg 32 l# q [31:0] $end
$upscope $end
$scope module writing_information31 $end
$var wire 1 ! clk $end
$var wire 32 m# d [31:0] $end
$var wire 1 n# wrenable $end
$var reg 32 o# q [31:0] $end
$upscope $end
$scope module writing_information4 $end
$var wire 1 ! clk $end
$var wire 32 p# d [31:0] $end
$var wire 1 q# wrenable $end
$var reg 32 r# q [31:0] $end
$upscope $end
$scope module writing_information5 $end
$var wire 1 ! clk $end
$var wire 32 s# d [31:0] $end
$var wire 1 t# wrenable $end
$var reg 32 u# q [31:0] $end
$upscope $end
$scope module writing_information6 $end
$var wire 1 ! clk $end
$var wire 32 v# d [31:0] $end
$var wire 1 w# wrenable $end
$var reg 32 x# q [31:0] $end
$upscope $end
$scope module writing_information7 $end
$var wire 1 ! clk $end
$var wire 32 y# d [31:0] $end
$var wire 1 z# wrenable $end
$var reg 32 {# q [31:0] $end
$upscope $end
$scope module writing_information8 $end
$var wire 1 ! clk $end
$var wire 32 |# d [31:0] $end
$var wire 1 }# wrenable $end
$var reg 32 ~# q [31:0] $end
$upscope $end
$scope module writing_information9 $end
$var wire 1 ! clk $end
$var wire 32 !$ d [31:0] $end
$var wire 1 "$ wrenable $end
$var reg 32 #$ q [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope module mux32to1by1 $end
$var wire 5 $$ address [4:0] $end
$var wire 32 %$ inputs [31:0] $end
$var wire 1 &$ out $end
$upscope $end
$scope module register $end
$var wire 1 '$ clk $end
$var wire 1 ($ d $end
$var wire 1 )$ wrenable $end
$var reg 1 *$ q $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
x*$
z)$
z($
z'$
x&$
bz %$
bz $$
bx #$
x"$
bx !$
bx ~#
x}#
bx |#
bx {#
xz#
bx y#
bx x#
xw#
bx v#
bx u#
xt#
bx s#
bx r#
xq#
bx p#
bx o#
xn#
bx m#
bx l#
xk#
bx j#
bx i#
xh#
bx g#
bx f#
xe#
bx d#
bx c#
xb#
bx a#
bx `#
x_#
bx ^#
bx ]#
x\#
bx [#
bx Z#
xY#
bx X#
bx W#
xV#
bx U#
bx T#
xS#
bx R#
bx Q#
xP#
bx O#
bx N#
xM#
bx L#
bx K#
xJ#
bx I#
bx H#
xG#
bx F#
bx E#
xD#
bx C#
bx B#
xA#
bx @#
bx ?#
x>#
bx =#
bx <#
x;#
bx :#
bx 9#
x8#
bx 7#
bx 6#
x5#
bx 4#
bx 3#
x2#
bx 1#
bx 0#
x/#
bx .#
bx -#
x,#
bx +#
bx *#
x)#
bx (#
bx '#
x&#
bx %#
bx $#
x##
bx "#
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
bx r"
bx q"
bx p"
bx o"
bx n"
bx m"
bx l"
bx k"
bx j"
bx i"
bx h"
bx g"
bx f"
bx e"
bx d"
bx c"
bx b"
bx a"
bx `"
bx _"
bx ^"
bx ]"
bx \"
bx ["
bx Z"
bx Y"
bx X"
bx W"
bx V"
bx U"
bx T"
bx S"
bx R"
bx Q"
bx P"
bx O"
bx N"
bx M"
bx L"
bx K"
bx J"
bx I"
bx H"
bx G"
bx F"
bx E"
bx D"
bx C"
bx B"
bx A"
bx @"
bx ?"
bx >"
bx ="
bx <"
bx ;"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 5"
bx 4"
bx 3"
bx 2"
bx 1"
bx 0"
bx /"
bx ."
bx -"
bx ,"
bx +"
bx *"
bx )"
bx ("
bx '"
bx &"
bx %"
bx $"
bx #"
bx ""
bx !"
bx ~
bx }
bx |
bx {
bx z
bx y
bx x
bx w
bx v
bx u
bx t
bx s
bx r
bx q
bx p
bx o
bx n
bx m
bx l
bx k
bx j
bx i
bx h
bx g
bx f
bx e
bx d
bx c
bx b
bx a
bx `
bx _
bx ^
bx ]
bx \
bx [
bx Z
bx Y
bx X
bx W
bx V
bx U
bx T
bx S
bx R
bx Q
bx P
bx O
bx N
xM
xL
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
xC
xB
bx A
bx @
x?
x>
x=
x<
x;
x:
bx 9
bx 8
bx 7
x6
x5
x4
x3
bx 2
bx 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
bx &
x%
0$
1#
bx "
0!
$end
#1
1$
#2
0$
#10
1!
#20
0!
#30
1!
#40
0!
#50
1!
#60
0!
#70
1!
#80
0!
#90
1!
#100
0!
#110
1!
#120
0!
#130
1!
#140
0!
#150
1!
#160
0!
#170
1!
#180
0!
#190
1!
#200
0!
#210
1!
#220
0!
#230
1!
#240
0!
#250
1!
#260
0!
#270
1!
#280
0!
#290
1!
#300
0!
#310
1!
#320
0!
#330
1!
#340
0!
#350
1!
#360
0!
#370
1!
#380
0!
#390
1!
#400
0!
#410
1!
#420
0!
#430
1!
#440
0!
#450
1!
#460
0!
#470
1!
#480
0!
#490
1!
#500
0!
#510
1!
#520
0!
#530
1!
#540
0!
#550
1!
#560
0!
#570
1!
#580
0!
#590
1!
#600
0!
#610
1!
#620
0!
#630
1!
#640
0!
#650
1!
#660
0!
#670
1!
#680
0!
#690
1!
#700
0!
#710
1!
#720
0!
#730
1!
#740
0!
#750
1!
#760
0!
#770
1!
#780
0!
#790
1!
#800
0!
#810
1!
#820
0!
#830
1!
#840
0!
#850
1!
#860
0!
#870
1!
#880
0!
#890
1!
#900
0!
#910
1!
#920
0!
#930
1!
#940
0!
#950
1!
#960
0!
#970
1!
#980
0!
#990
1!
#1000
0!
#1010
1!
#1020
0!
#1030
1!
#1040
0!
#1050
1!
#1060
0!
#1070
1!
#1080
0!
#1090
1!
#1100
0!
#1110
1!
#1120
0!
#1130
1!
#1140
0!
#1150
1!
#1152
